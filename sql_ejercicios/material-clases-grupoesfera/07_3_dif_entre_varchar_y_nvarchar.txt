En MS SQL SERVER:
=================

varchar: Variable-length, non-Unicode character data. The database collation determines which code page the data is stored using.

nvarchar: Variable-length Unicode character data. Dependent on the database collation for comparisons.

Armed with this knowledge, use whichever one matches your input data (ASCII v. Unicode).


An nvarchar column can store any Unicode data. A varchar column is restricted to an 8-bit codepage. Some people think that varchar should be used because it takes up less space. I believe this is not the correct answer. Codepage incompatabilities are a pain, and Unicode is the cure for codepage problems. With cheap disk and memory nowadays, there is really no reason to waste time mucking around with code pages anymore.

All modern operating systems and development platforms use Unicode internally. By using nvarchar rather than varchar, you can avoid doing encoding conversions every time you read from or write to the database. Conversions take time, and are prone to errors. And recovery from conversion errors is a non-trivial problem.

If you are interfacing with an application that uses only ASCII, I would still recommend using Unicode in the database. The OS and database collation algorithms will work better with Unicode. Unicode avoids conversion problems when interfacing with other systems. And you will be preparing for the future. And you can always validate that your data is restricted to 7-bit ASCII for whatever legacy system you're having to maintain, even while enjoying some of the benefits of full Unicode storage.


En MySQL:
=========

En MySQL se usa VARCHAR, no se usa NVARCHAR, sin embargo el VARCHAR de MySQL permite manejar diferentes tipos de encoding

MSSQL: nvarchar(100) 
es lo mismo que 
MySQL: varchar(100) character set UTF8

Ejemplo en Mysql tanto para usar utf8 y Ascii:

create table PruebaParaVarchar
(
	nombreUTF8 varchar(10) character set utf8,
	nombreAscii varchar(200) character set ascii
)





